<?php
// $Id:

/**
 * @file
 * Taxonomy Tweaks module for Behavenet.com
 */

/**
 * Implements hook_taxonomy
 */
function taxonomy_tweaks_taxonomy($op, $type, $data) {
  if ('delete' == $op && 'term' == $type) {
    $nid = db_result(db_query("
      SELECT nid
      FROM {tax_tweaks}
      WHERE tid = %d
    ", $data['tid']));

    // Remove extras, if they exist
    if (!empty($nid)) {
      node_delete($nid);
    }

    // Remove the entry from our table for this term
    db_query("
      DELETE FROM {tax_tweaks}
      WHERE tid = %d
    ", $data['tid']);
  }
}

function taxonomy_tweaks_form_tax_tweaks_extras_node_form_alter(&$form, &$form_state) {
  foreach ($form as $index => $item) {
    unset($form[$index]);
  }
  $form['warning'] = array(
    '#value' => '<p>You should not create or edit content of this type independent of the taxonomy system.</p>',
  );
}

/**
 * Implements hook_form_FORM_NAME_alter
 * @param $form - array containing the form structure
 * @param $form_state - current state of the form
 * @return none
 * @see http://api.drupal.org/api/function/hook_form_alter/6
 */
function taxonomy_tweaks_form_taxonomy_manager_form_alter(&$form, &$form_state) {

  // Hide description field in lieu of tax_tweaks extras
  $form['term_data']['description']['#type'] = 'hidden';

  // So now the save button is just for the term name
  $form['term_data']['save']['#value'] = 'Change term name';
  unset($form['term_data']['save']['#attributes']);

  // Add an option to edit taxonomy extras
  $form['term_data']['extras'] = array(
    '#type' => 'submit',
    '#value' => 'Edit extra fields for this term',
    '#submit' => array('taxonomy_tweaks_submit'),
  );

  $form['term_data']['tweaks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Behavenet options'),
    '#weight' => 20,
  );
  $tid = $form['term_data']['tid']['#value'];
  $acro = taxonomy_tweaks_is_acronym($tid);
  $form['term_data']['tweaks']['intro'] = array(
    '#value' => '<p>The term is ' . ($acro ? '' : 'not ') . 'an acronym for another term.</p>',
  );
  $form['term_data']['tweaks']['is_acronym'] = array(
    '#type' => 'hidden',
    '#value' => $acro ? '0' : '1',  // flip current results
  );
  $form['term_data']['tweaks']['change'] = array(
    '#type' => 'submit',
    '#value' => $acro ? 'Remove Acronym Setting' : 'Set As Acronym',
    '#submit' => array('taxonomy_tweaks_submit'),
  );
  $form['term_data']['tweaks']['break'] = array(
    '#value' => '<div class="clear-break"></div>',
  );
  $form['term_data']['tweaks']['delete_only'] = array(
    '#type' => 'submit',
    '#value' => 'Delete term' ,
    '#submit' => array('taxonomy_tweaks_submit'),
  );

  $orphans = array();
  if ($children = taxonomy_get_children($tid)) {
    foreach ($children as $child) {
      $parents = taxonomy_get_parents($child->tid);
      if (count($parents) == 1) {
        $orphans[] = l($child->name, "taxonomy/term/$child->tid");
      }
    }
  }
  if (count($orphans)) {
    $form['term_data']['tweaks']['children'] = array(
      '#value' => '<p>Deleting this term will leave ' . count($orphans)
                  . ' orphaned child term(s). Select "Delete Term and Orphans"
                    to delete this term and the following orphaned terms:</p>'
                  . '<ul><li>' . implode ('</li><li>', $orphans) . '</li></ul>',
    );
    $form['term_data']['tweaks']['delete_all'] = array(
      '#type' => 'submit',
      '#value' => 'Delete term and orphans',
      '#submit' => array('taxonomy_tweaks_submit'),
    );
  }

  dsm($form);
}

function taxonomy_tweaks_validate($form, &$form_state) {

}

function taxonomy_tweaks_submit($form, &$form_state) {
  // dpr($form_state); exit;
  $tid = $form_state['values']['term_data']['tid'];
  $is_acronym = $form_state['values']['term_data']['tweaks']['is_acronym'];
  $desc = $form_state['values']['term_data']['description'];

  if ('Delete term and orphans' == $form_state['values']['op']
    || 'Delete term' == $form_state['values']['op']
  ) {
    $del_all = ('Delete term and orphans' == $form_state['values']['op']);
    $term = taxonomy_get_term($tid);
    include_once (drupal_get_path('module', 'taxonomy_manager') . '/taxonomy_manager.admin.inc');
    taxonomy_manager_delete_terms(array($tid), array('delete_orphans' => $del_all));
    drupal_set_message (t('The term %term has been deleted.', array('%term' => $term->name)));
    $form_state['redirect'] = '<front>';
  }
  else if ('Set As Acronym' == $form_state['values']['op']){
    $result = db_query("
      SELECT * FROM {tax_tweaks}
      WHERE tid = %d
    ", $tid);
    $row = db_fetch_object($result);
    if (empty($row->tid)) {
      // Create a new row
      $nid = _taxonomy_tweaks_create_extras($desc);
      db_query("
        INSERT INTO {tax_tweaks}
        (tid, is_acronym, extras_nid)
        VALUES (%d, %d, %d)
      ", $tid, $is_acronym, $nid);
    }
    else {
      // Update existing row
      db_query("
        UPDATE {tax_tweaks}
        SET is_acronym = %d
        WHERE tid = %d
      ", $is_acromyn, $tid);
    }
  }
  else if ('Edit extra fields for this term' == $form_state['values']['op']) {
    dpr($tid);
    dpr($form_state['values']); exit;

    $nid = db_result(db_query("
      SELECT nid
      FROM {tax_tweaks}
      WHERE tid = %d
    ", $tid));

    if (empty($nid)) {
      // Create a new extras node with the existing description in it
      $nid = _taxonomy_tweaks_create_extras($desc);


      // TODO here!!!!


    }
  }
}

function taxonomy_tweaks_is_acronym($tid) {
  $result = db_result(db_query("
    SELECT tt.is_acronym
    FROM {tax_tweaks} AS tt
    WHERE tt.tid = %d",
    $tid
  ));
  return (!empty($result));
}

function _taxonomy_tweaks_create_extras($desciption = '') {
  global $user;
  $node = new stdClass();
  $node->title = "Taxonomy Extras for term ID $tid";
  $node->uid = $user->uid;
  $node->type = 'tax_tweaks_extras';
  $node->status = 0;    // Unpublished to keep out of sight from general users
  $node->promote = 0;
  $node->field_tt_extras_description = array(0 => array(
    'value' => $description,
    'format' => 3,        // WYSIWYG format
  ));
  $node = node_submit($node);
  node_save($node);
  return $node->nid;
}



    $nid = 0;

    // Separate check from tid check below since this may have been an existing
    // tax_tweak item, thus having a tid, but no extras_nid.
    if (empty($row->extras_nid)) {
      // Create a new node to hold the extras data
      $nid = _taxonomy_tweaks_create_extras();
    }
    else {
      $nid = $row->extras_nid;
    }

