<?php
// $Id:

/**
 * @file
 * Taxonomy Tweaks module for Behavenet.com
 */

/**
 * Implements hook_taxonomy
 */
function taxonomy_tweaks_taxonomy($op, $type, $data) {
  if ('delete' == $op && 'term' == $type) {
    $nid = db_result(db_query("
      SELECT extras_nid
      FROM {tax_tweaks}
      WHERE tid = %d
    ", $data['tid']));

    // Remove extras, if they exist
    if (!empty($nid)) {
      node_delete($nid);
    }

    // Remove the entry from our table for this term
    db_query("
      DELETE FROM {tax_tweaks}
      WHERE tid = %d
    ", $data['tid']);
  }
}

/**
 * Implements hook_nodeapi
 */
function taxonomy_tweaks_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ('delete' == $op && 'tax_tweaks_extras' == $node->type) {
    if (!empty($node->field_tt_extras_term[0]['value'])) {
      taxonomy_tweaks_unset_extras($node->field_tt_extras_term[0]['value']);
      // @TODO: Should we also remove the description field from the term?
    }
  }
}


 /**
 * Implements hook_form_FORM_NAME_alter
 *
 * Alter the extras node edit form
 */
function taxonomy_tweaks_form_tax_tweaks_extras_node_form_alter(&$form, &$form_state) {
  // dsm($form);
  // dsm($form_state);

  $node = $form['#node'];
  $term = '';
  if (empty($node->nid)) {
    foreach ($form as $index => $item) {
      unset($form[$index]);
    }
    $form['warning'] = array(
      '#value' => '<p>You should not create content of this type independent of the taxonomy system.</p>',
    );
    return;
  }
  else {
    $term = taxonomy_get_term($node->field_tt_extras_term[0]['value']);
  }

  if (empty($term)) {
    // When creating the node for the first time, we need the tid passed as a URL parameter
    $args = arg();
    $tid = $args[3];
    $term = taxonomy_get_term($tid);
    if (empty($term)) {
      foreach ($form as $index => $item) {
        unset($form[$index]);
      }
      $form['warning'] = array(
        '#value' => "<p>An invalid term ID ($tid) has been specified.</p>",
      );
      return;
    }
  }

  $form['tax_tweaks_tid'] = array(
    '#type' => 'value',
    '#value' => $term->tid,
  );
  $form['title']['#default_value'] = "Extra details for '$term->name'";
  $form['title']['#access'] = FALSE;

  // Update the node body with the current term description
  $form['#node']->field_tt_extras_description[0]['value'] = $term->description;

  // Hide term name field from view -- this is not editable -- but since it's
  // a CCK field, we have to do it after the form is built.
  $form['#after_build'][] = 'taxonomy_tweaks_after_build';

  array_unshift($form['buttons']['submit']['#submit'], 'taxonomy_tweaks_extras_submit');
}

/**
 * Handles submission of the altered extras node edit form
 */
function taxonomy_tweaks_extras_submit($form, &$form_state) {
  $vals = &$form_state['values'];
  $tid = $vals['tax_tweaks_tid'];

  if ('Save' == $vals['op']) {
    db_query("
      UPDATE {term_data}
      SET description = '%s'
      WHERE tid = %d
    ", $vals['field_tt_extras_description'][0]['value'], $tid);

    // Duplicate the tid in the field_tt_extras_term field so we have Views support
    $form['field_tt_extras_term'] = array(0 => array('value' => $tid));
  }
}

function taxonomy_tweaks_after_build($form, &$form_state) {
  $form['field_tt_extras_term']['#access'] = FALSE;
  return $form;
}

/**
 * Implements hook_form_FORM_NAME_alter
 *
 * Alters Taxonomy Manager's term edit page
 */
function taxonomy_tweaks_form_taxonomy_manager_form_alter(&$form, &$form_state) {

  // Hide description field in lieu of tax_tweaks extras
  $form['term_data']['description']['#type'] = 'hidden';

  // Remove the TM Delete button as it just causes confusion if no terms
  // are checked in the listing.  Replace with Delete Term, below.
  $form['toolbar']['delete_confirm']['#access'] = FALSE;

  // So now the save button is just for the term name
  // $form['term_data']['save']['#value'] = 'Change term name';  // Breaks submit...
  unset($form['term_data']['save']['#attributes']);

  // Add an option to edit taxonomy extras
  $form['term_data']['extras'] = array(
    '#type' => 'submit',
    '#value' => 'Edit extra fields for this term',
    '#submit' => array('taxonomy_tweaks_submit'),
  );

  $form['term_data']['tweaks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Behavenet options'),
    '#weight' => 20,
  );
  $tid = $form['term_data']['tid']['#value'];
  $acro = taxonomy_tweaks_is_acronym($tid);
  $form['term_data']['tweaks']['intro'] = array(
    '#value' => '<p>The term is ' . ($acro ? '' : 'not ') . 'an acronym for another term.</p>',
  );
  $form['term_data']['tweaks']['is_acronym'] = array(
    '#type' => 'hidden',
    '#value' => $acro ? '0' : '1',  // flip current results
  );
  $form['term_data']['tweaks']['change'] = array(
    '#type' => 'submit',
    '#value' => $acro ? 'Remove Acronym Setting' : 'Set As Acronym',
    '#submit' => array('taxonomy_tweaks_submit'),
  );
  $form['term_data']['tweaks']['break'] = array(
    '#value' => '<div class="clear-break"></div>',
  );
  $form['term_data']['tweaks']['delete_only'] = array(
    '#type' => 'submit',
    '#value' => 'Delete term' ,
    '#submit' => array('taxonomy_tweaks_submit'),
    '#attributes' => array('onclick' => 'if(!confirm("You cannot undo this action. Are you sure you want to delete this term?")){return false;}')
  );

  $orphans = array();
  if ($children = taxonomy_get_children($tid)) {
    foreach ($children as $child) {
      $parents = taxonomy_get_parents($child->tid);
      if (count($parents) == 1) {
        $orphans[] = l($child->name, "taxonomy/term/$child->tid");
      }
    }
  }
  if (count($orphans)) {
    $form['term_data']['tweaks']['children'] = array(
      '#value' => '<p>Deleting this term will leave ' . count($orphans)
                  . ' orphaned child term(s). Select "Delete Term and Orphans"
                    to delete this term and the following orphaned terms:</p>'
                  . '<ul><li>' . implode ('</li><li>', $orphans) . '</li></ul>',
    );
    $form['term_data']['tweaks']['delete_all'] = array(
      '#type' => 'submit',
      '#value' => 'Delete term and orphans',
      '#submit' => array('taxonomy_tweaks_submit'),
      '#attributes' => array('onclick' => 'if(!confirm("You cannot undo this action. Are you sure you want to delete these terms?")){return false;}')
    );
  }
}

function taxonomy_tweaks_validate($form, &$form_state) {

}

function taxonomy_tweaks_submit($form, &$form_state) {
  $vals = $form_state['values'];
  $tid = $vals['term_data']['tid'];
  $is_acronym = $vals['term_data']['tweaks']['is_acronym'];

  if ('Delete term and orphans' == $vals['op']
    || 'Delete term' == $vals['op']
  ) {
    $del_all = ('Delete term and orphans' == $vals['op']);
    $term = taxonomy_get_term($tid);
    include_once (drupal_get_path('module', 'taxonomy_manager') . '/taxonomy_manager.admin.inc');
    taxonomy_manager_delete_terms(array($tid), array('delete_orphans' => $del_all));
    drupal_set_message (t('The term %term has been deleted.', array('%term' => $term->name)));
    $form_state['redirect'] = '<front>';
  }
  else {
    // Grab existing Tax Tweaks info or create a new entry and Tax Tweaks node
    $result = db_query("
      SELECT * FROM {tax_tweaks}
      WHERE tid = %d
    ", $tid);
    $row = db_fetch_object($result);

    $nid = 0;
    if (!$row) {
      // Create a new row
      $nid = _taxonomy_tweaks_create_extras($tid);
    }
    else {
      $nid = $row->extras_nid;
    }

    if ('Set As Acronym' == $vals['op'] || 'Remove Acronym Setting' == $vals['op']){
      db_query("
        UPDATE {tax_tweaks}
        SET is_acronym = %d
        WHERE tid = %d
      ", $is_acronym, $tid);
    }
    else if ('Edit extra fields for this term' == $vals['op']) {
      // Redirect the user to the edit page.
      drupal_goto("node/$nid/edit/$tid");
    }
  }
}

/**
 * Associates an extras node id with a term tid
 */
function taxonomy_tweaks_set_extras($tid, $nid) {
  $result = db_query("
    SELECT *
    FROM {tax_tweaks} AS tt
    WHERE tt.tid = %d
  ", $tid);
  $row = db_fetch_array($result);

  if (empty($row)) {
    db_query("
      INSERT INTO {tax_tweaks} (tid, is_acronym, extras_nid)
      VALUES (%d, %d, %d)
    ", $tid, 0, $nid);
  }
  else {
    db_query("
      UPDATE {tax_tweaks}
      SET extras_nid = %d
      WHERE tid = %d
    ", $nid, $tid);
  }
}

/**
 * Removes the assoication created in taxonomy_tweaks_set_extras
 */
function taxonomy_tweaks_unset_extras($tid) {
  db_query("
    UPDATE {tax_tweaks}
    SET extras_nid = NULL
    WHERE tid = %d
  ", $tid);
}

/**
 * Returns the node nid that holds the extra data for a given term ID or 0.
 */
function taxonomy_tweaks_get_extras($tid) {
  $nid = db_result(db_query("
    SELECT tt.extras_nid
    FROM {tax_tweaks} AS tt
    WHERE tt.tid = %d
  ", $tid));
  if (empty($nid)) {
    return 0;
  }
  else {
    return $nid;
  }
}

/**
 * Internal function used to create an extras node with an optional description
 */
function _taxonomy_tweaks_create_extras($tid) {
  global $user;
  $term = taxonomy_get_term($tid);

  $node = new stdClass();
  $node->title = "Extra details for $term->name";
  $node->type = 'tax_tweaks_extras';
  $node->status = 0;    // Unpublished to keep out of sight from general users
  $node->promote = 0;
  $node->field_tt_extras_description = array(0 => array(
    'value' => $term->description,
    'format' => 3,        // WYSIWYG format
  ));
  $node->field_tt_extras_term = array(0 => array('value' => $tid));
  $node = node_submit($node);
  $node->uid = $user->uid;

  node_save($node);

  // Create association in tax_tweaks table
  taxonomy_tweaks_set_extras($tid, $node->nid);

  return $node->nid;
}


/**
 * Returns TRUE if this term ID is an acronym
 */
function taxonomy_tweaks_is_acronym($tid) {
  $result = db_result(db_query("
    SELECT tt.is_acronym
    FROM {tax_tweaks} AS tt
    WHERE tt.tid = %d",
    $tid
  ));
  return (!empty($result));
}


/**
 * Returns an array of tid's that are acronyms
 */
function taxonomy_tweaks_get_acronyms() {
  $list = array();
  $results = db_query("
    SELECT tt.tid FROM {tax_tweaks} AS tt
    WHERE tt.is_acronym = 1
  ");
  while ($row = db_fetch_object($results)) {
    $list[] = $row->tid;
  }
  return $list;
}
